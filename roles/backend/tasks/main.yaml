- name: disabiling nodejs 
  ansible.builtin.command:  dnf module disable nodejs:18 -y

- name: enabiling nodejs
  ansible.builtin.command:  dnf module enable nodejs:20 -y

- name: installing nodejs
  ansible.builtin.dnf:
    name: nodejs
    state: installed

- name: creating user
  ansible.builtin.user:
    name: expense
    state: present

# - name: creating app dir
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: downloading backend to tmp
#   ansible.builtin.get_url:
#     url:  https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: unzipping backend in app
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes

- name: calling common
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req
  tags:
  - deployment


# - name: install npm dependencies
#   ansible.builtin.command: npm install
#   args:
#     chdir: /app
#   tags:
#   - deployment

- name: copying backend service to backend server
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
  notify:
  - restart backend

- name: installing mysql
  ansible.builtin.dnf:
    name: mysql
    state: installed

- name: installing python dependencies
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9

- name: loading schema
  community.mysql.mysql_db:
    login_host: "{{ login_host }}"
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    state: import
    target: /app/schema/backend.sql
    name: all

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable
  ansible.builtin.service:
    name: backend
    state: restarted
    enabled: yes
  tags:
  - deployment